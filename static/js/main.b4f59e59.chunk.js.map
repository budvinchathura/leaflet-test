{"version":3,"sources":["logo.svg","components/map.js","redux/actions/index.js","components/checks.js","App.js","serviceWorker.js","redux/reducers/map_center.js","redux/reducers/markers.js","redux/reducers/index.js","index.js"],"names":["module","exports","MapComponent","props","map_center","useSelector","state","markers","Map","zoom","center","style","width","height","TileLayer","attribution","url","CircleMarker","Popup","a","Marker","position","b","set_center","type","payload","add_marker","index","marker","Checkboxes","dispatch","useDispatch","ma","lat","lng","mb","React","useState","checkeda","setCheckeda","checkedb","setCheckedb","Checkbox","checked","onChange","event","target","undefined","value","inputProps","App","loc1","loc2","className","Button","variant","onClick","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","Boolean","window","location","hostname","match","deafult_center","map_center_reducer","action","markers_reducer","Object","assign","all_reducers","combineReducers","myStore","createStore","allReducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4f59e59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nimport React from \"react\";\r\nimport { Map, TileLayer, Marker, Popup, CircleMarker } from \"react-leaflet\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport function MapComponent(props) {\r\n    const map_center = useSelector(state => state.map_center)\r\n    const markers = useSelector(state => state.markers)\r\n\r\n    var zoom = 15;\r\n\r\n\r\n    return (\r\n        <Map zoom={zoom} center={map_center} style={{ width: '900px', height: '700px' }}>\r\n            <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n\r\n            <CircleMarker center={map_center}>\r\n                <Popup>\r\n                    A pretty CSS3 popup. <br /> Easily customizable.\r\n                </Popup>\r\n            </CircleMarker>\r\n\r\n            {(markers.a) &&\r\n                <Marker position={markers.a}>\r\n                    <Popup>\r\n                        A pretty CSS3 popup. <br /> Easily customizable.\r\n                </Popup>\r\n                </Marker>\r\n            }\r\n\r\n            {(markers.b) &&\r\n                <Marker position={markers.b}>\r\n                    <Popup>\r\n                        A pretty CSS3 popup. <br /> Easily customizable.\r\n                </Popup>\r\n                </Marker>\r\n            }\r\n        </Map>\r\n    );\r\n\r\n}\r\n\r\n","export const set_center = (center) => {\r\n    return {\r\n        type: 'SET_CENTER',\r\n        payload: center\r\n    }\r\n}\r\n\r\nexport const add_marker = (index, marker)=>{\r\n    switch (index) {\r\n        case 'a':\r\n            return {\r\n                type: 'SET_A',\r\n                payload: marker\r\n            }\r\n        case 'b':\r\n            return {\r\n                type: 'SET_B',\r\n                payload: marker\r\n            }\r\n\r\n        case 'c':\r\n            return {\r\n                type: 'SET_C',\r\n                payload: marker\r\n            }\r\n\r\n    }\r\n}","import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { useDispatch } from 'react-redux';\r\nimport {add_marker} from '../redux/actions'\r\n\r\n\r\n\r\nexport function Checkboxes() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const ma = {\r\n        lat:-35.42258,\r\n        lng:149.2376973\r\n    }\r\n\r\n    const mb = {\r\n        lat:-35.42653,\r\n        lng:149.2301903\r\n    }\r\n\r\n    const [checkeda, setCheckeda] = React.useState(false);\r\n\r\n    const handleChangea = event => {\r\n        setCheckeda(event.target.checked);\r\n        if(event.target.checked){\r\n            dispatch(add_marker('a',ma))\r\n        }else{\r\n            dispatch(add_marker('a',undefined))\r\n        }\r\n    };\r\n\r\n\r\n    const [checkedb, setCheckedb] = React.useState(false);\r\n\r\n    const handleChangeb = event => {\r\n        setCheckedb(event.target.checked);\r\n        if(event.target.checked){\r\n            dispatch(add_marker('b',mb))\r\n        }else{\r\n            dispatch(add_marker('b',undefined))\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Checkbox\r\n                checked={checkeda}\r\n                onChange={handleChangea}\r\n                value=\"primary\"\r\n                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n            />\r\n\r\n\r\n            <Checkbox\r\n                checked={checkedb}\r\n                onChange={handleChangeb}\r\n                value=\"primary\"\r\n                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n            />\r\n\r\n\r\n           \r\n\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Button } from '@material-ui/core';\n\nimport { MapComponent } from './components/map'\nimport { Checkboxes } from './components/checks'\nimport './App.css';\nimport { useDispatch } from 'react-redux';\nimport { set_center } from './redux/actions'\nimport { latLng } from 'leaflet';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const loc1 = {\n    lat: -35.417656,\n    lng: 149.2314343\n  }\n\n  const loc2 = {\n    lat: -35.424103,\n    lng: 149.2435207\n  }\n\n  function current_loc() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(getPosition);\n    }\n    function getPosition(position) {\n      dispatch(set_center({lat:position.coords.latitude,lng:position.coords.longitude}))\n    }\n  }\n\n\n\n  return (\n    <div className=\"App\">\n\n      <div >\n        <MapComponent />\n        {/* -35.417656,149.2314343 */}\n\n\n\n        <Button variant=\"outlined\" onClick={() => { dispatch(set_center(loc1)) }}>1st location</Button>\n        <Button variant=\"outlined\" onClick={() => { dispatch(set_center(loc2)) }}>2nd location</Button>\n        <Button variant=\"outlined\" onClick={current_loc}>current location</Button>\n        <Checkboxes />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const deafult_center = {\r\n    lat: -35.422213,\r\n    lng: 149.235797\r\n}\r\n\r\nconst map_center_reducer = (map_center = deafult_center, action) => {\r\n    switch (action.type) {\r\n        case 'SET_CENTER':\r\n            return action.payload\r\n        default:\r\n            return map_center\r\n    }\r\n}\r\n\r\nexport default map_center_reducer;","const markers_reducer = (markers = {}, action) => {\r\n    switch (action.type) {\r\n        case 'SET_A':\r\n            return Object.assign({markers},{a:action.payload})\r\n        case 'SET_B':\r\n            return Object.assign({markers},{b:action.payload})\r\n        case 'SET_C':\r\n            return Object.assign({markers},{b:action.payload})\r\n        default:\r\n            return markers\r\n    }\r\n}\r\n\r\nexport default markers_reducer;","import map_center_reducer from './map_center'\r\nimport markers_reducer from './markers'\r\n\r\nimport {combineReducers} from 'redux'\r\n\r\nconst all_reducers = combineReducers({\r\n    map_center:map_center_reducer,\r\n    markers:markers_reducer\r\n})\r\n\r\nexport default all_reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport allReducers from './redux/reducers';\nimport {Provider} from 'react-redux';\n\nconst myStore = createStore(\n    allReducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    );\n\n\n\n\n    ReactDOM.render(\n        <Provider store={myStore}>\n            <App />\n        </Provider>\n        , document.getElementById('root')\n    );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}